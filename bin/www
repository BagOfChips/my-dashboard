#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('my-dashboard:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// finish
var finish = require('finish');

// timeAgo
var timeAgo = require('epoch-to-timeago').timeAgo;

// import reddit api wrapper
var snoowrap = require('snoowrap');
const r = new snoowrap({
    userAgent: process.env.reddit_userAgent,
    clientId: process.env.reddit_clientId,
    clientSecret: process.env.reddit_clientSecret,
    refreshToken: process.env.reddit_refreshToken
});

// socket.io - for web sockets
// due to this auto generated Express.js template from webstorm
// i cant find a different place for the code below

var io = require('socket.io')(server);

io.on('connection', function(socket){
    console.log("SOCKET.IO: connected");

    socket.on("fetchUpdatedPosts", function(data){

        // data.subreddit, data.limit
        data.subreddit = data.subreddit.slice(2); // remove "r/"
        sendUpdatedPosts(data.subreddit, data.limit, function(updatedPosts){
            // send data back to browser
            io.emit("updatedPostData", updatedPosts);
        });
    });

    socket.on("fetchUpdatedComments", function(data){
        sendUpdatedComments(data, function(updatedPosts){
            io.emit("updatedCommentData", updatedPosts);
        });
    });
});

function sendUpdatedComments(postId, callback){
    console.log("postId: " + postId);

    r.getSubmission(postId).expandReplies({
        limit: 1,
        depth: 1
    }).then(comments => {
        var numberComments = comments.comments.length;
        console.log("Number of comments fetched: " + numberComments);

        if(numberComments > 0){

            // use finish module to handle for loops async
            finish(function(async){
                comments.comments.forEach(function(commentTree){
                    async(function(done){
                        convertRedditCommentsEpochTimes(commentTree, done);
                    });
                });
            }, function(err, res){
                // err and res are "returned" as null by default, ignore
                callback(comments);
            });

        }else{
            // failure to fetch
            console.log("fetchTopComments WENT WRONG");
            callback(null);
        }

    });
}

function convertRedditCommentsEpochTimes(commentRoot, callback){
    var now = new Date().getTime();

    commentRoot.created_utc = timeAgo(commentRoot.created_utc * 1000, now);
    for(var i = 0; i < commentRoot.replies.length; i++){

        // use finish module to handle for loops async
        finish(function(async){
            async(function(done){
                convertRedditCommentsEpochTimes(commentRoot.replies[i], done);
            });
        }, function(err, res){});
    }

    callback(null, null);
}

function sendUpdatedPosts(subreddit, limit, callback){
    console.log("subreddit: " + subreddit);

    r.getSubreddit(subreddit).getHot({
        limit: limit
    }).then(hotPosts => {

        // convert epoch times to readable human string
        hotPosts = convertRedditListEpochTimes(hotPosts);

        if('length' in hotPosts){
            callback(hotPosts);
        }else{
            console.log("no posts found; subreddit: " + subreddit + "; limit: " + limit);
            callback(null);
        }
    });
}

function convertRedditListEpochTimes(posts){
    var now = new Date().getTime();
    for(var i = 0; i < posts.length; i++){
        posts[i].created_utc = timeAgo(posts[i].created_utc * 1000, now);
    }
    return posts;
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
